#!/usr/bin/env ruby

# Load libraries
require 'uri'
require 'tmpdir'
require 'fileutils'
require 'yaml'

# Allow git commands to function locally.
ENV['GIT_DIR'] = nil

# Variables
@last_framework = "None"
@buildpacks     = []
@frameworks     = []
@release        = {}
@last_release   = {}

def parse_buildpack_file
  buildpack_file = "#{ARGV[0]}/.buildpacks"
  return @buildpacks unless File.exists?(buildpack_file)

  File.open(buildpack_file).each_line.with_index(1) do |line,line_number|
    line.strip!
    next if line.empty? || line[0] == "#"
    begin
      uri = URI.parse(line)
    rescue URI::InvalidURIError
      print "WARNING: Line #{line_number} of the .buildpacks file is invalid!\n"
      next
    end

    @buildpacks << {
      'url' => uri.to_s.split('#').first,
      'ref' => uri.fragment
    }
  end
end

def download_buildpack(dir, url, ref)
  print "=====> Downloading Buildpack: #{url}\n"

  if url =~ /\.tgz$/
    Dir.mkdir dir
    `curl -s "#{url}" | tar xvz -C "#{dir}" >/dev/null 2>&1`
  else
    `git clone "#{url}" "#{dir}" >/dev/null 2>&1`
    Dir.chdir(dir){`git checkout "#{ref}" >/dev/null 2>&1`} unless ref.nil?
    if File.exists?("#{dir}/.gitmodules")
      print "=====> Detected git submodules. Initializing...\n"
      Dir.chdir(dir){`git submodule update --init --recursive`}
    end
  end
end

def build_buildpack(dir)
  Dir.chdir(dir) do
    # Ensure buildpack entry points are executable.
    `chmod -f +x ./bin/{detect,compile,release} || true`

    @last_framework = `./bin/detect "#{ARGV[0]}"`.strip
    @frameworks << @last_framework
    if $?.to_i.zero?
      print "=====> Detected Framework: #{@last_framework}\n"
      `./bin/compile "#{ARGV[0]}" "#{ARGV[1]}" "#{ARGV[2]}"`
      exit(1) unless $?.to_i.zero?
    end
  end
end

def export_environment(dir)
  Hash[`source "#{dir}/export" && env`.split.map{|ev| ev.split('=')}].each do |key,val|
    next if key.strip.empty? || val.strip.empty?
    ENV[key] = val
  end
end

def write_release(dir)
  return unless File.exists?("#{dir}/bin/release")
  @last_release = YAML.load(`#{dir}/bin/release "#{ARGV[0]}"`)
  @release.merge(@last_release)
end

# Actually do the builds
parse_buildpack_file
@buildpacks.each do |buildpack|
  dir = Dir.mktmpdir
  FileUtils.rm_rf(dir)

  download_buildpack(dir, buildpack['url'], buildpack['ref'])
  build_buildpack(dir)
  export_environment(dir)
  write_release(dir)

  buildpack['framework'] = @last_framework
  buildpack['release']   = @last_release
end

print "Using release info from framworks: #{@framworks.join(', ')}"
File.write("#{ARGV[0]}/last_release.out", @release.to_yaml)
